#!/usr/bin/env python


''' --------------------------------------------------------------------------
20170731: 
--------
Prototype for the control of CIAO, the Calern Imaging Adaptive Observatory.

Revised in august 2017: closed-loop tests

Revised in october 2017: after SHM system upgrade

Author: Frantz Martinache (frantz.martinache@oca.eu)

-------------------------------------------------------------------------- '''

from QtMain import QtMain, QApplication
from PyQt4 import QtCore, QtGui, uic
from PyQt4.QtCore import QThread
from PyQt4.QtGui import QLabel, QImage

import threading

import pyqtgraph as pg
import sys
import numpy as np
from numpy.linalg import solve
import matplotlib.cm as cm

import os
import shutil

import matplotlib.pyplot as plt
plt.ion()
plt.show()

import pdb
import time

try:
    import astropy.io.fits as pf
except:
    import pyfits as pf

import socket # for off-load to TCS

neig = 30

# =====================================================================
home = os.getenv('HOME')
conf_dir = home+'/.config/ciao/'
if not os.path.exists(conf_dir):
    os.makedirs(conf_dir)

guidef = "ciao_ctrl.ui"
try:
    shutil.copy(guidef, conf_dir+guidef)
except:
    print("Problem with config directory?")

try:
    from xaosim.shmlib import shm
    import xaosim.zernike as zernike

except:
    sys.path.append(home+"/src/python/libs/")
    from scexao_shm import shm
    import zernike


# ===============================================================
#       attempt to connect to server (via named pipe)
# ===============================================================
fifo_cam_in = "/home/ciaodev/bin/ixon_fifo_in"
fifo_cam_out = "/home/ciaodev/bin/ixon_fifo_out"

if os.path.exists(fifo_cam_in):
    try:
        cmd_fifo = open(fifo_cam_in, 'w')
    except:
        print("could not open the fifo in write mode")
else:
    print("expected fifo does not exist")


# =====================================================================
# =====================================================================
myqt = 0 # to have myqt as a global variable

def main():
    global myqt
    myqt = QtMain()
    gui = MyWindow()
    myqt.mainloop()
    myqt.gui_quit()
    sys.exit()

# =====================================================================
#                               Tools 
# =====================================================================
def arr2im(arr, vmin=False, vmax=False, pwr=1.0, cmap=None, gamma=1.0):
    ''' --------------------------------------------------------------
    Convert a numpy array into image for display:

    limits dynamic range, power coefficient, applies colormap and gamma
    --------------------------------------------------------------  '''
    arr2 = arr.astype('float')
    if vmin is False:
        mmin = arr2.min()
    else:
        mmin = vmin

    if vmax is False:
        mmax = arr2.max()
    else:
        mmax = vmax

    arr2 -= mmin
    if mmax != mmin:
        arr2 /= (mmax-mmin)

    arr2 = arr2**pwr

    #cm.jet.set_gamma(0.1)
    if cmap == None:
        mycmap = cm.jet
    else:
        mycmap = cmap

    res = mycmap(arr2)
    res[:,:,3] = gamma
    return(res)

# =====================================================================
#                          Tech algorithms
# =====================================================================
def centroid_position0(img):
    temp = img.argmax()
    xc, yc = temp % img.shape[0], temp % img.shape[0]
    return((yc, xc))

def centroid_position(img):
    ''' --------------------------------------------------------------
    Returns the (x,y) position of the centroid of the array *img*
    -------------------------------------------------------------- '''
    xxc = np.arange(img.shape[1])
    yyc = np.arange(img.shape[0])
    mprofx = img.mean(0)
    mprofy = img.mean(1)
    mprofx -= mprofx.min()
    mprofy -= mprofy.min()
    denomx = np.sum(mprofx)
    denomy = np.sum(mprofy)

    if denomx > 1:
        xc = np.sum(mprofx * xxc) / np.sum(mprofx)
    else:
        xc = 0.0
    if denomy > 1:
        yc = np.sum(mprofy * yyc) / np.sum(mprofy)
    else:
        yc = 0.0
    return((yc, xc))

# ========================================================================
#         connecting to the shared memory data structures
# ========================================================================

alpao_tt  = shm('/tmp/dmdisp2.im.shm', verbose=False)
alpao_ho  = shm('/tmp/dmdisp3.im.shm', verbose=False)
alpao_ttc = shm('/tmp/dmdisp6.im.shm', verbose=False) # calibration for tt
alpao_hoc = shm('/tmp/dmdisp7.im.shm', verbose=False) # calibration for howfs

ixon     = shm('/tmp/ixon.im.shm', verbose=False)


try:
    dms = alpao_ho.mtdata['size'][0]
except:
    dms = alpao_ho.size[0] # fall-back on the previous form

try:
    (xs, ys) = ixon.mtdata['size'][0:2]
except:
    (ys, xs) = ixon.size[0:2]

# ========================================================================
#              DM MASK (knowledge of ALPAO actuator layout)
# ========================================================================
xdm, ydm = np.meshgrid(np.arange(dms)-dms/2, np.arange(dms)-dms/2)
xdm = xdm.T.astype('float32')
ydm = ydm.T.astype('float32')
dmmask   = np.ones((dms, dms), dtype=np.int) # to remove non-existing actuators
dmmask[np.abs(xdm) + np.abs(ydm) > 7] = 0.0

# =====================================================================
def zer_mode_bank_2D(sz, i0, i1):
    dZ = 1 + i1 - i0
    res = np.zeros((dZ,sz,sz))
    for i in range(i0,i1+1):
        res[i-i0] = zernike.mkzer1(i, sz, sz/2) * dmmask
    return(res)

# =====================================================================
#                         Thread specifics
# =====================================================================
class GenericThread(QtCore.QThread):
    ''' ---------------------------------------------------
    generic thread class used to externalize the execution
    of a function (calibration, closed-loop) to a separate
    thread.
    --------------------------------------------------- '''
    def __init__(self, function, *args, **kwargs):
        QtCore.QThread.__init__(self)
        self.function = function
        self.args = args
        self.kwargs = kwargs
 
    def __del__(self):
        self.wait()
 
    def run(self):
        self.function(*self.args,**self.kwargs)
        return

# =====================================================================
#                          Main GUI object
# =====================================================================

class MyWindow(QtGui.QMainWindow):
    ''' ------------------------------------------------------
    This is the meat of the program: the class that drives
    the GUI.
    ------------------------------------------------------ '''
    def __init__(self):
        global index
        self.mySHM = None           # handle for mmapped SHM file
        self.vmin  = False          # startup image display settings
        self.vmax  = False          # idem
        self.pwr   = 1.0            # idem
        self.mycmap = cm.viridis    # idem
        self.abort_flag = False     # generic abort flag

        self.threshold = 0          # threshold for photometry
        # --------------------
        self.tt_a0 = 0.05           # tip-tilt loop calibration amplitude
        self.tt_gain = 0.01         # tip-tilt loop gain
        self.ttx_mean = 0.0
        self.tty_mean = 0.0
        self.tt_abort_flag = False  # tip-tilt loop abort flag
        self.ttx_mult = 0.03
        self.tty_mult = 0.03

        # --------------------
        self.zz_gain = 0.01
        self.zz_abort_flag = False  # zernike loop abort flag
        self.zz_a0 = 0.05
        self.zz_nz = 5

        # --------------------
        self.zo_gain = 0.01
        self.zo_abort_flag = False  # zonal loop abort flag
        self.zo_a0 = 0.05


        super(MyWindow, self).__init__()
        if not os.path.exists(conf_dir + guidef):
            uic.loadUi(guidef, self)
        else:
            uic.loadUi(conf_dir + guidef, self)

        self.cam_tints = [0.001, 0.002, 0.005, 
                          0.010, 0.020, 0.050,
                          0.100, 0.200, 0.500]

        self.cam_itint = 0
        self.cam_tint = 0.001
        # ==============================================
        #      prepare the raw image display
        # ==============================================
        self.gView_shm.hideAxis('left')
        self.gView_shm.hideAxis('bottom')

        self.imv_raw = pg.ImageItem()
        self.overlay  = pg.GraphItem()
        
        self.gView_shm.addItem(self.imv_raw)
        self.gView_shm.addItem(self.overlay)

        # ==============================================
        #    prepare the photometry + slope displays
        # ==============================================
        self.gView_phot.hideAxis('left')
        self.gView_phot.hideAxis('bottom')
        self.imv_phot = pg.ImageItem()
        self.gView_phot.addItem(self.imv_phot)
        # ----
        self.gView_xslp.hideAxis('left')
        self.gView_xslp.hideAxis('bottom')
        self.imv_xslp = pg.ImageItem()
        self.gView_xslp.addItem(self.imv_xslp)
        # ----
        self.gView_yslp.hideAxis('left')
        self.gView_yslp.hideAxis('bottom')
        self.imv_yslp = pg.ImageItem()
        self.gView_yslp.addItem(self.imv_yslp)

        # ==============================================
        #             GUI widget actions 
        # ==============================================
        self.pB_cam_stream.clicked.connect(self.cam_stream)
        self.pB_cam_stop.clicked.connect(self.cam_pause)

        self.pB_cam_tint_inc.clicked.connect(self.cam_tint_inc)
        self.pB_cam_tint_dec.clicked.connect(self.cam_tint_dec)

        self.dspB_disp_min.valueChanged[float].connect(self.update_vmin)
        self.dspB_disp_max.valueChanged[float].connect(self.update_vmax)

        self.chB_min.stateChanged[int].connect(self.update_vmin)
        self.chB_min.stateChanged[int].connect(self.update_vmax)

        self.chB_nonlinear.stateChanged[int].connect(self.update_nonlinear)

        self.cmB_cbar.addItems(['gray', 'hot', 'jet',
                                'viridis', 'magma', 'inferno',
                                'plasma'])
        self.cmB_cbar.activated[str].connect(self.update_cbar)
        self.cmB_cbar.setCurrentIndex(3)

        self.chB_show_grid.stateChanged[int].connect(self.redraw_SH_grid)
        self.spB_grid_x0.valueChanged[int].connect(self.redraw_SH_grid)
        self.spB_grid_y0.valueChanged[int].connect(self.redraw_SH_grid)
        self.spB_grid_dx.valueChanged[float].connect(self.redraw_SH_grid)
        self.spB_grid_dy.valueChanged[float].connect(self.redraw_SH_grid)
        self.spB_grid_threshold.valueChanged[int].connect(self.updt_SH_threshold)

        self.pB_abort.clicked.connect(self.abort_now)
        self.pB_loopon.clicked.connect(self.close_loop_call)

        # ==============================================
        #             tip-tilt mini-GUI
        # ==============================================
        self.dspB_tt_a0.valueChanged[float].connect(self.update_tt_a0)
        self.dspB_tt_gain.valueChanged[float].connect(self.update_tt_gain)
        self.pB_tt_recal.clicked.connect(self.tt_calib_call)
        self.pB_tt_abort.clicked.connect(self.tt_abort_now)
        self.pB_tt_cloop.clicked.connect(self.tt_cloop_call)
        self.pB_tt_reset.clicked.connect(self.tt_reset)
        self.pB_tcs_offload.clicked.connect(self.offload_to_tcs)

        # ==============================================
        #             Zernike mini-GUI
        # ==============================================
        self.dspB_zz_a0.valueChanged[float].connect(self.update_zz_a0)
        self.dspB_zz_gain.valueChanged[float].connect(self.update_zz_gain)
        self.dspB_zz_nz.valueChanged[int].connect(self.update_zz_nz)
        self.pB_zz_recal.clicked.connect(self.zz_calib_call)
        self.pB_zz_abort.clicked.connect(self.zz_abort_now)
        self.pB_zz_cloop.clicked.connect(self.zz_cloop_call)
        self.pB_zz_reset.clicked.connect(self.zz_reset)

        # ==============================================
        #             Zonal control mini-GUI
        # ==============================================
        self.dspB_mm_a0.valueChanged[float].connect(self.update_zo_a0)
        self.dspB_mm_gain.valueChanged[float].connect(self.update_zo_gain)

        self.pB_mm_recal.clicked.connect(self.zo_calib_call)
        self.pB_mm_abort.clicked.connect(self.zo_abort_now)
        self.pB_mm_cloop.clicked.connect(self.zo_cloop_call)
        self.pB_mm_reset.clicked.connect(self.zz_reset) # yep: zz_reset!

        # ==============================================
        #             top-menu actions
        # ==============================================
        self.actionQuit.triggered.connect(sys.exit)
        self.actionQuit.setShortcut('Ctrl+Q')

        self.actionOpen.triggered.connect(self.load_shm)

        args = sys.argv[1:]
        if args is not []:
            try:
                self.mySHM = shm(str(args[0]))
                self.live_counter = -1
            except:
                self.mySHM = None
            

        try:
            self.MM = pf.getdata(conf_dir+'zonal_response_matrix.fits')
            self.MM[np.abs(self.MM) > 15.0] = 0.0
            U,S,Vh = np.linalg.svd(self.MM.T, full_matrices=0)
            iS1 = 1./S
            iS1[neig:] = 0.0
            iS1 = np.diag(iS1)

            self.MMinv = Vh.T.dot(iS1).dot(U.T)
            print("Re-loaded existing zonal interaction matrix!")
        except:
            print("No available zonal response matrix!")
            pass

        try:
            self.SH_phot_ref = pf.getdata(conf_dir+'zo_phot_ref.fits')
        except:
            print("No reference photometry preloaded: calib required!")

        # ==============================================
        self.redraw_SH_grid()
        self.pB_grid_set.clicked.connect(self.define_SH_data)
        self.define_SH_data()
        # ==============================================
        self.show()
        
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.refresh_all)
        self.timer.start(100)

    # =========================================================
    def closeEvent(self, event):
        sys.exit()

    # =========================================================
    def cam_stream(self,):
        cmd_fifo.write("stream")
        cmd_fifo.flush()

    # =========================================================
    def cam_pause(self,):
        cmd_fifo.write("abort")
        cmd_fifo.flush()

    # =========================================================
    def cam_tint_inc(self,):
        self.cam_itint = min(self.cam_itint+1, 8)
        self.cam_tint = self.cam_tints[self.cam_itint]
        cmd_fifo.write("tint %.4f" % (self.cam_tint,))
        cmd_fifo.flush()

    # =========================================================
    def cam_tint_dec(self,):
        self.cam_itint = max(self.cam_itint-1, 0)
        self.cam_tint = self.cam_tints[self.cam_itint]
        cmd_fifo.write("tint %.4f" % (self.cam_tint,))
        cmd_fifo.flush()

    # =========================================================
    def DM_list_2_map2D(self, data):
        ''' ------------------------------------------------
        Convert a list of 97 voltages back into a 2D map for
        easy 2D representation.
        ------------------------------------------------ '''
        global dmmask
        res = np.zeros((dms,  dms), dtype=np.float32)

        i0 = 0
        for k in xrange(dms*dms):
            if (dmmask.flatten()[k] > 0):
                i = k / dms
                j = k % dms
                res[i,j] = data[i0]
                i0 += 1
        return(res)

    # =========================================================
    def define_SH_data(self):
        xx, yy   = self.SH_xx , self.SH_yy        
        ncx, ncy = xx.size - 1, yy.size - 1

        self.SH_phot = np.zeros((ncy, ncx)) # photometry
        self.SH_xslp = np.zeros((ncy, ncx)) # x-slope
        self.SH_yslp = np.zeros((ncy, ncx)) # y-slope
        self.SH_xref = np.zeros((ncy, ncx)) # x-reference
        self.SH_yref = np.zeros((ncy, ncx)) # y-reference
        # additional arrays for convenience
        self.SH_xtmp = np.zeros((ncy, ncx))
        self.SH_ytmp = np.zeros((ncy, ncx))
        self.calc_SH_data(ref=True)

        self.shm_phot_gain = shm('/tmp/phot_gain.im.shm', data=self.SH_phot, 
                                 verbose=False) # experiment!

        self.shm_phot_inst = shm('/tmp/phot_inst.im.shm', data=self.SH_phot, 
                                 verbose=False) # experiment!

    # =========================================================
    def calc_SH_data(self, data=None, ref=True):
        xx, yy   = self.SH_xx , self.SH_yy        
        ncx, ncy = xx.size - 1, yy.size - 1

        if data is None:
            self.live_img = self.mySHM.get_data(False, True) # CHANGE SHM ON CIAO !!
        else:
            self.live_img = data

        self.live_img[self.live_img <= self.vmin] = self.vmin

        for j in xrange(ncy):
            y0, y1 = int(np.round(yy[j])), int(np.round(yy[j+1]))

            for i in xrange(ncx):
                x0, x1 = int(np.round(xx[i])), int(np.round(xx[i+1]))

                self.SH_xref[j,i] = 0.5 * (x1 - x0) #self.SH_dx
                self.SH_yref[j,i] = 0.5 * (y1 - y0) #self.SH_dy

                sub_arr           = self.live_img[y0:y1,x0:x1]
                self.SH_phot[j,i] = sub_arr.max() #- self.threshold

                sub_arr[sub_arr < self.threshold] = self.threshold
                if self.SH_phot[j,i] > self.threshold:
                    (yc, xc) = centroid_position(sub_arr)
                else:
                    (yc, xc) = (self.SH_xref[j,i], self.SH_yref[j,i])

                self.SH_xtmp[j,i] = xc
                self.SH_ytmp[j,i] = yc

        if ref is True:
            self.SH_xref = self.SH_xtmp.copy()
            self.SH_yref = self.SH_ytmp.copy()

        self.SH_xslp = self.SH_xtmp - self.SH_xref
        self.SH_yslp = self.SH_ytmp - self.SH_yref

        self.SH_xslp[self.SH_phot <= self.threshold] = 0.0
        self.SH_yslp[self.SH_phot <= self.threshold] = 0.0

        # here is information about the tip-tilt in pixels!
        # weighted mean version!
        #self.ttx_mean = np.sum(self.SH_xslp * self.SH_phot) / np.sum(self.SH_phot)
        #self.tty_mean = np.sum(self.SH_yslp * self.SH_phot) / np.sum(self.SH_phot)

        # original version below
        self.ttx_mean = np.median(self.SH_xslp[self.SH_phot > self.threshold])
        self.tty_mean = np.median(self.SH_yslp[self.SH_phot > self.threshold])

    # =========================================================
    def calc_slopes(self, data):
        xx, yy   = self.SH_xx , self.SH_yy        
        ncx, ncy = xx.size - 1, yy.size - 1

        xslp = np.zeros((ncy, ncx))
        yslp = np.zeros((ncy, ncx))

        data[data <= self.threshold] = self.threshold
                
        for j in xrange(ncy):
            y0, y1 = int(np.round(yy[j],1)), int(np.round(yy[j+1]))

            for i in xrange(ncx):
                x0, x1 = int(np.round(xx[i],1)), int(np.round(xx[i+1]))

                sub_arr = data[y0:y1,x0:x1]

                if self.SH_phot[j,i] > self.threshold:
                    (xc, yc) = centroid_position(sub_arr)
                    xslp[j,i] = xc
                    yslp[j,i] = yc

        return((xslp - self.SH_xref, yslp - self.SH_yref))
    
    # =========================================================
    def redraw_SH_grid(self):
        self.SH_x0 = self.spB_grid_x0.value()
        self.SH_y0 = self.spB_grid_y0.value()
        self.SH_dx = self.spB_grid_dx.value()
        self.SH_dy = self.spB_grid_dy.value()

        isz = 128
        
        nx = int((isz - self.SH_x0) / self.SH_dx + 2)
        xx = self.SH_x0 + np.arange(nx-1) * self.SH_dx
        if (isz - xx[-1] > self.SH_dx/2+2):
            xx = np.append(xx, isz)
        
        ny = int((isz - self.SH_y0) / self.SH_dy + 2)
        yy = self.SH_y0 + np.arange(ny-1) * self.SH_dy
        if (isz - yy[-1] > self.SH_dy/2+2):
            yy = np.append(yy, isz)
        
        posx = np.zeros((2 * nx, 2), dtype=np.int)
        for i, myx in enumerate(xx):
            posx[2*i, 0] = myx
            posx[2*i, 1] = yy[0]
            posx[2*i+1, 0] = myx
            posx[2*i+1, 1] = min(yy[-1], isz-1) # -1 for display
        
        posy = np.zeros((2 * ny, 2), dtype=np.int)
        for i, myy in enumerate(yy):
            posy[2*i,   1] = myy
            posy[2*i,   0] = xx[0]
            posy[2*i+1, 1] = myy
            posy[2*i+1, 0] = min(xx[-1], isz-1)
    
        pos = np.append(posy, posx, axis=0)        
        adj = np.arange(2*(nx+ny)).reshape(nx+ny, 2)

        self.SH_xx = xx
        self.SH_yy = yy
        
        if self.chB_show_grid.isChecked():
            self.overlay.setData(pos=pos, adj=adj, pen=(255,0,0,255),
                                 symbolPen=None, symbolBrush=None)
        else:
            self.overlay.setData(pos=pos, adj=adj, pen=None,
                                 symbolPen=None, symbolBrush=None)

    # =========================================================
    def update_cbar(self):
        cbar = str(self.cmB_cbar.currentText()).lower()
        try:
            exec 'self.mycmap = cm.%s' % (cbar,)
        except:
            print("colormap %s is not available" % (cbar,))
            self.mycmap = cm.jet

    # =========================================================
    def update_vmin(self):
        self.vmin = False
        if self.chB_min.isChecked():
            self.vmin = self.dspB_disp_min.value()
        
    # =========================================================
    def update_vmax(self):
        self.vmax = False
        if self.chB_max.isChecked():
            self.vmax = self.dspB_disp_max.value()

    # =========================================================
    def update_nonlinear(self):
        self.pwr = 1.0
        if self.chB_nonlinear.isChecked():
            self.pwr = 0.3

    # =========================================================
    def refresh_img(self):
        self.imv_raw.setImage(arr2im(self.data_img.T,
                                     vmin=self.vmin, vmax=self.vmax,
                                     pwr=self.pwr,
                                     cmap=self.mycmap), border=2)

        self.imv_phot.setImage(arr2im(self.SH_phot.T,
                                      vmin=self.vmin, vmax=self.vmax,
                                      cmap=self.mycmap), border=2)

        self.imv_xslp.setImage(arr2im(self.SH_xslp.T,
                                      vmin=-6, vmax=6,
                                      cmap=self.mycmap), border=2)
        
        self.imv_yslp.setImage(arr2im(self.SH_yslp.T,
                                      vmin=-6, vmax=6,
                                      cmap=self.mycmap), border=2)

    # =========================================================
    def refresh_stats(self):
        self.toto = "OK"
        pt_levels = [0, 5, 10, 20, 50, 75, 90, 95, 99, 100]
        pt_values = np.percentile(self.data_img, pt_levels)
        
        msg = "<pre>\n"
        for i, ptile in enumerate(pt_levels):
            msg += "p-tile %3d = %8.2f\n" % (ptile, pt_values[i])
        msg += "\ntt_xy = (%+.2f,%+.2f)\n" % (self.ttx_mean, self.tty_mean)
        msg += "</pre>"
        self.lbl_stats.setText(msg)

    # =========================================================
    def load_shm(self):
        fname = QtGui.QFileDialog.getOpenFileName(self, 'Load SHM file', 
                                                  '/tmp/*.im.shm')
        if self.mySHM is not None:
            self.mySHM.close()
            
        self.mySHM = shm(str(fname))
        self.live_counter = -1

    # =========================================================
    def refresh_all(self):
        ''' ----------------------------------------------------------
        Refresh the display

        Independently from the "under the hood" engine, the display
        gets refreshed every now and then, to give visual feedback
        to the user.
        ---------------------------------------------------------- '''
        self.test = 0
        if self.mySHM is not None:
            if self.live_counter < self.mySHM.get_counter():
                self.data_img = self.mySHM.get_data(False, True)
                self.live_counter = self.mySHM.get_counter()

            self.refresh_img()
            self.refresh_stats()
            
    # =========================================================
    def close_loop_call(self):
        ''' --------------------------------------------------
        Callback connected to the "Close Loop" button.
        Starts a new thread that oversees closed-loop operation.
        -------------------------------------------------- '''
        self.pB_loopon.setEnabled(False)
        self.pB_grid_set.setEnabled(False)
        self.calThread = GenericThread(self.close_loop)
        self.calThread.start()

    # =========================================================
    def close_loop(self):
        global myqt
        while not self.abort_flag:
            self.calc_SH_data(ref=False)
        self.abort_flag = False
        myqt.gui_call(self.pB_loopon.setEnabled, True)
        myqt.gui_call(self.pB_grid_set.setEnabled, True)

    # =========================================================        
    def abort_now(self):
        ''' --------------------------------------------------
        Callback connected to the "Abort" button.
        -------------------------------------------------- '''
        if not self.abort_flag:
            self.abort_flag = True

    # =========================================================
    def updt_SH_threshold(self):
        self.threshold = self.spB_grid_threshold.value()

    # =========================================================
    #                 TIP-TILT LOOP CONTROL
    # =========================================================
    def update_tt_a0(self):
        self.tt_a0 = self.dspB_tt_a0.value()

    # =========================================================
    def update_tt_gain(self):
        self.tt_gain = self.dspB_tt_gain.value()

    # =========================================================
    def tt_calib_call(self):
        ''' --------------------------------------------------
        Callback connected to the "tip-tilt calibration" button.
        Starts a new thread that oversees this operation.
        -------------------------------------------------- '''
        self.calThread = GenericThread(self.tt_calib)
        self.calThread.start()

    # =========================================================
    def tt_reset(self):
        alpao_tt.set_data(0.0*ydm.astype('float32'))

    # =========================================================
    def tt_calib(self):
        nav = 5
        ref = self.get_coadd(nav)

        dm0 = alpao_ttc.get_data()
        pf.writeto(conf_dir+"img_ref.fits", ref, overwrite=True)
        self.calc_SH_data(data=ref, ref=True)
        
        alpao_ttc.set_data(dm0 + self.tt_a0 * xdm)
        time.sleep(0.5)
        tt_x = self.get_coadd(nav)
        pf.writeto(conf_dir+'img_tt_x.fits', tt_x, overwrite=True)

        alpao_ttc.set_data(dm0 + self.tt_a0 * ydm)
        time.sleep(0.5)
        tt_y = self.get_coadd(nav)
        pf.writeto(conf_dir+'img_tt_y.fits', tt_y, overwrite=True)

        alpao_ttc.set_data(dm0) # back to starting point
        time.sleep(0.5)
        
        ttx_resp = self.calc_slopes(data=tt_x)
        print(np.round(ttx_resp, 1))
        tty_resp = self.calc_slopes(data=tt_y)
        print(np.round(tty_resp, 1))

        self.ttx_mult = self.tt_a0 / np.median(ttx_resp[0][self.SH_phot > self.threshold])
        self.tty_mult = self.tt_a0 / np.median(tty_resp[1][self.SH_phot > self.threshold])

        #print "!!!!!!!!"
        #print np.median(ttx_resp[0][self.SH_phot > self.threshold])
        #print np.median(tty_resp[1][self.SH_phot > self.threshold])
        #print "!!!!!!!!"

        print self.ttx_mult, self.tty_mult

    # =========================================================
    def tt_abort_now(self):
        ''' --------------------------------------------------
        Callback connected to the TIP-TILT "Abort" button.
        -------------------------------------------------- '''
        if not self.tt_abort_flag:
            self.tt_abort_flag = True

    # =========================================================
    def tt_cloop_call(self):
        self.pB_tt_cloop.setEnabled(False)
        self.calThread = GenericThread(self.tt_cloop)
        self.calThread.start()

    # =========================================================
    def offload_to_tcs(self):
        # figure out how much you've corrected so far
        myshape = alpao_tt.get_data()

        ttx_tot = np.sum(myshape * xdm) / np.sum(xdm * xdm) * 100. / 4.0
        tty_tot = np.sum(myshape * ydm) / np.sum(ydm * ydm) * 100. / 4.0

        print("tt total: x,y = %.5f, %.5f" % (ttx_tot, tty_tot))

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        try:
            sock.connect(('10.150.10.18', 3737))
        except:
            print("Socket connection refused.")
            return(0)

        sock.send('#TCS_GET_POINTING_INFO:?\r')

        reply = sock.recv(1024)[1:-1].split(' ')
        print reply
        h0 = 10*np.pi/180.0            # mystery angle
        houra = float(reply[5]) + h0 # hour angle in rad

        print("hour angle !!", houra)
        myrot = np.array([[-np.sin(houra), -np.cos(houra)],
                          [-np.cos(houra), np.sin(houra)]])

        print myrot

        mycmd = np.dot(myrot, [ttx_tot, tty_tot]) # in arcseconds

        sock.send('#TCS_SET_GUIDING_OFFSETS: %.2f %.2f:?\r' % (mycmd[0], mycmd[1]))
        print('#TCS_SET_GUIDING_OFFSETS: %.2f %.2f?\r' % (mycmd[0], mycmd[1]))
        reply = sock.recv(1024)[1:-1].split(' ')
        print reply
        
        alpao_tt.set_data(0.0*myshape)
        sock.close()

    # =========================================================
    def tt_cloop(self):
        gain = self.tt_gain

        print("tip-tilt closed-loop!")
        while not self.tt_abort_flag:
            myshape = alpao_tt.get_data()
            correc = self.ttx_mult * self.ttx_mean * xdm + \
                     self.tty_mult * self.tty_mean * ydm

            alpao_tt.set_data(0.99*(myshape - gain * correc).astype('float32'))
            time.sleep(0.05) # for simulation only!
            
        # end of loop
        self.tt_abort_flag = False
        print("\ntip-tilt loop opened!\n")
        myqt.gui_call(self.pB_tt_cloop.setEnabled, True)

    # =========================================================
    #                   Zonal control
    # =========================================================
    def update_zo_a0(self):
        self.zo_a0 = self.dspB_mm_a0.value()

    # =========================================================
    def update_zo_gain(self):
        self.zo_gain = self.dspB_mm_gain.value()

    # =========================================================
    def zo_calib_call(self):
        self.calThread = GenericThread(self.zo_calib)
        self.calThread.start()

    # =========================================================
    def zo_cloop_call(self):
        self.pB_mm_cloop.setEnabled(False)
        self.calThread = GenericThread(self.zo_cloop)
        self.calThread.start()

    # =========================================================
    def zo_abort_now(self):
        if not self.zo_abort_flag:
            self.zo_abort_flag = True

    # =========================================================
    def zo_cloop(self):
        gain = self.zo_gain
        self.zo_abort_flag = False

        while not self.zo_abort_flag:
            # measure current slopes
            liveim = self.mySHM.get_data(False, True)
            temp = np.array(self.calc_slopes(data=liveim))
            phot = self.SH_phot.copy()

            self.shm_phot_inst.set_data(phot)

            # apply a weight that depends on the instant phot
            phot /= phot.max()
            ph_gain = np.sqrt(phot * self.SH_phot_ref)
            #ph_gain[ph_gain > 1] = 0.0 # security
            self.shm_phot_gain.set_data(ph_gain)
            #temp[0] *= ph_gain
            #temp[1] *= ph_gain

            my_slopes = np.append(temp[0], temp[1])
            my_cmd    = np.dot(self.MMinv, my_slopes)
            correc    = self.DM_list_2_map2D(my_cmd)

            myshape = alpao_ho.get_data()

            # apply to DM on reserved channel
            alpao_ho.set_data(0.95 * (myshape - gain * correc).astype('float32'))
            time.sleep(1e-2)

        # end of loop
        self.zo_abort_flag = False
        print("\Zonal loop opened!\n")
        myqt.gui_call(self.pB_mm_cloop.setEnabled, True)

        print("ok")

    # =========================================================
    #                   Zernike control
    # =========================================================
    def update_zz_a0(self):
        self.zz_a0 = self.dspB_zz_a0.value()

    # =========================================================
    def update_zz_gain(self):
        self.zz_gain = self.dspB_zz_gain.value()

    # =========================================================
    def update_zz_nz(self):
        self.zz_nz = self.dspB_zz_nz.value()

    # =========================================================
    def zz_cloop_call(self):
        self.pB_zz_cloop.setEnabled(False)
        self.calThread = GenericThread(self.zz_cloop)
        self.calThread.start()

    # =========================================================
    def zz_calib_call(self):
        self.calThread = GenericThread(self.zz_calib)
        self.calThread.start()

    # =========================================================
    def zz_abort_now(self):
        if not self.zz_abort_flag:
            self.zz_abort_flag = True

    # =========================================================
    def zz_reset(self):
        alpao_ho.set_data(0.0*ydm.astype('float32'))

    # =========================================================
    def zz_cloop(self):
        gain = self.zz_gain
        nz = self.zz_nz

        while not self.zz_abort_flag:
            # measure current slopes
            liveim = self.mySHM.get_data(False, True)
            temp = self.calc_slopes(data=liveim)
            my_slopes = np.append(temp[0], temp[1])

            # compute correction
            coeffs = solve(self.RTR, np.dot(self.RR, my_slopes))
            
            myshape = alpao_ho.get_data()
            correc = np.zeros_like(myshape)

            for iz in range(nz):
                correc += coeffs[iz] * self.modes[iz]

            # apply to DM on reserved channel
            alpao_ho.set_data((myshape - gain * correc).astype('float32'))
            time.sleep(1e-2)
        # end of loop
        self.zz_abort_flag = False
        print("\nZernike loop opened!\n")
        myqt.gui_call(self.pB_zz_cloop.setEnabled, True)

        print("ok")

    # =========================================================
    def zz_calib(self):
        a0 = self.zz_a0 # modulation amplitude
        nz = self.zz_nz # total number of zernikes calibrated
        nav = 100

        iz0 = 4
        self.modes = zer_mode_bank_2D(dms, iz0, iz0+nz-1).astype(np.float32)

        # reference position acquired
        ref        = self.get_coadd(nav)
        temp       = self.calc_slopes(data=ref)
        ref_slopes = np.append(temp[0], temp[1])
        ncells     = ref_slopes.size

        RESP = []
        for iz in range(iz0, iz0+nz):
            alpao_hoc.set_data(a0 * self.modes[iz-iz0].astype('float32'))
            img = self.get_coadd(nav)
            temp = self.calc_slopes(data=img)
            mode_slopes = np.append(temp[0], temp[1]) - ref_slopes

            #mode_slopes = np.append(self.calc_slopes(data=img)) - ref_slopes
            RESP.append(mode_slopes)
            time.sleep(0.1)

        alpao_hoc.set_data(0.0 * self.modes[0].astype('float32'))

        #self.zz_reset()
        self.RR = np.array(RESP) / a0 # response is now 2D matrix
        self.RTR = np.dot(self.RR, self.RR.T)

        pf.writeto(conf_dir+'zernike_response_matrix.fits', self.RR, overwrite=True)
        print("Zernike calibration completed")

    # =========================================================
    def zo_calib(self):
        global dmmask
        
        nav = 5 # number of frames to average

        # reference position acquired
        ref        = self.get_coadd(nav)
        temp       = self.calc_slopes(data=ref)
        #self.SH_xref = temp[0] + self.SH_xref
        #self.SH_yref = temp[1] + self.SH_yref
        #temp       = self.calc_slopes(data=ref)

        ref_slopes = np.append(temp[0], temp[1])
        ncells     = ref_slopes.size

        # reference photometry for later weighting
        self.SH_phot_ref = self.SH_phot.copy()
        self.SH_phot_ref /= self.SH_phot_ref.max()
        pf.writeto(conf_dir+'zo_phot_ref.fits', self.SH_phot_ref, overwrite=True)

        ref_phot         = np.append(self.SH_phot.flatten(), 
                                     self.SH_phot.flatten())
        mask             = np.zeros_like(ref_phot)
        mask[ref_phot > self.threshold] = 1.0

        a0 = self.zo_a0 # modulation amplitude
        dmap0 = 0.0 * alpao_hoc.get_data()
        dmap = dmap0.copy()

        RESP = []

        for i in range(dms*dms):
            j0, i0 = i % dms, i / dms
            if dmmask[i0,j0] > 0:
                dmap[:] = 0.0
                dmap[i0,j0] = a0
                alpao_hoc.set_data(dmap)
                time.sleep(0.05)
                
                img = self.get_coadd(nav)
                temp = self.calc_slopes(data=img)
                mode_slopes = np.append(temp[0], temp[1]) - ref_slopes
                RESP.append(mode_slopes * mask)
                time.sleep(0.05)
        alpao_hoc.set_data(dmap0)

        self.MM = np.array(RESP) / a0 # response is now a 2D matrix

        self.MM[np.abs(self.MM) > 15.0] = 0.0
        U,S,Vh = np.linalg.svd(self.MM.T, full_matrices=0)
        iS1 = 1./S
        iS1[neig:] = 0.0
        iS1 = np.diag(iS1)
        self.MMinv = Vh.T.dot(iS1).dot(U.T)

        pf.writeto(conf_dir+'zonal_response_matrix.fits', self.MM, overwrite=True)
        print("Zonal calibration complete!")

    # =========================================================
    def get_coadd(self, nav=20):
        myim = self.mySHM.get_data(True, True)
        for i in range(nav-1):
            myim += self.mySHM.get_data(True, True)
            sys.stdout.write("\rcoadd %d"  %(i,))
            sys.stdout.flush()
            #time.sleep(0.1)
        myim /= nav
        return(myim)

# ==========================================================
# ==========================================================
if __name__ == "__main__":
    main()
