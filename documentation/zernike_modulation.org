#+TITLE: Acquisition CIAO par application de modes de Zernike
#+AUTHOR: Frantz Martinache

* introduction
Exemple de script simple communiquant avec le matériel de l'expérience
(caméra de l'analyseur de surface d'onde et miroir déformable) faisant
l'acquisition d'une image avant et après avoir appliqué un mode de
Zernike sur le channel #4 du miroir déformable.

Les images sont sauvegardées au format fits.

* script
#+begin_src python

#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
import astropy.io.fits as pf
import xaosim.zernike as zernike
from xaosim.shmlib import shm
import time

# ==========================================================
#             preparing for the CIAO environment
# ==========================================================
dms = 11 # number of DM actuators
chn =  4 # DM channel used for these zernike modulations

print("Reading shared memory data structures!")
DM   = shm('/tmp/dmdisp%d.im.shm' % (chn,), verbose=False)
cam  = shm('/tmp/ixon.im.shm')
print("Ready to roll!")

# ==========================================================
#            acquisition of the reference image
# ==========================================================
DM.set_data(np.zeros((dms,dms)).astype(np.float32))
time.sleep(0.5)
img = cam.get_data()
pf.writeto("test_reference.fits", img, clobber=True)

# ==========================================================
#          example of modulation  (defocus)
# ==========================================================
a0 = 0.1 # amplitude of the Zernike modulation
z0 = 4   # zernike polynomial corresponding to defocus

mymode = a0 * zernike.mkzer1(z0, dms, dms/2+1, True)

print("Applying zernike mode Z%d to DM!" % (z0,))
DM.set_data(mymode.astype(np.float32))
time.sleep(0.5)

img = cam.get_data()
pf.writeto("test_z%d_a0=%.2f.fits" % (z0, a0), img, clobber=True)

# ==========================================================
#                  closing the program
# ==========================================================
print("Reset DM to flat")
DM.set_data(np.zeros((dms,dms)).astype(np.float32))

print("Closing the bar!")
cam.close()
DM.close()

#+endsrc
